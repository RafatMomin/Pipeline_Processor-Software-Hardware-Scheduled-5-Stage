library IEEE;
use IEEE.std_logic_1164.all;

entity Forwarding_Unit is
  port(
    i_ID_EX_Rs_Addr   : in  std_logic_vector(4 downto 0);
    i_ID_EX_Rt_Addr   : in  std_logic_vector(4 downto 0);
    i_EX_MEM_Rd_Addr  : in  std_logic_vector(4 downto 0);
    i_MEM_WB_Rd_Addr  : in  std_logic_vector(4 downto 0);
    i_EX_MEM_RegWrite : in  std_logic;
    i_MEM_WB_RegWrite : in  std_logic;
    i_ID_EX_Shift     : in  std_logic;               -- shift?by?constant instruction
    i_ID_EX_ALUSrc    : in  std_logic;               -- immediate instruction
    o_ForwardA        : out std_logic_vector(1 downto 0);
    o_ForwardB        : out std_logic_vector(1 downto 0)
  );
end Forwarding_Unit;

architecture Behavioral of Forwarding_Unit is
begin
  process(
    i_ID_EX_Rs_Addr, i_ID_EX_Rt_Addr,
    i_EX_MEM_Rd_Addr, i_MEM_WB_Rd_Addr,
    i_EX_MEM_RegWrite, i_MEM_WB_RegWrite,
    i_ID_EX_Shift, i_ID_EX_ALUSrc
  ) begin
    -- defaults: no forwarding (select in0)
    o_ForwardA <= "00";
    o_ForwardB <= "00";

    -- === ALU A side ===
    if i_ID_EX_Shift = '1' then
      -- shift instruction: take the shamt input (in3)
      o_ForwardA <= "11";

    elsif (i_EX_MEM_RegWrite = '1')
       and (i_EX_MEM_Rd_Addr /= "00000")
       and (i_EX_MEM_Rd_Addr = i_ID_EX_Rs_Addr) then
      -- EX?EX hazard: forward ALU result from MEM stage (in2)
      o_ForwardA <= "10";

    elsif (i_MEM_WB_RegWrite = '1')
       and (i_MEM_WB_Rd_Addr /= "00000")
       and (i_MEM_WB_Rd_Addr = i_ID_EX_Rs_Addr) then
      -- WB?EX hazard: forward writeback data (in1)
      o_ForwardA <= "01";
    end if;

    -- === ALU B side ===
    if i_ID_EX_ALUSrc = '1' then
      -- immediate instruction: take the sign?extended immediate (in3)
      o_ForwardB <= "11";

    elsif (i_EX_MEM_RegWrite = '1')
       and (i_EX_MEM_Rd_Addr /= "00000")
       and (i_EX_MEM_Rd_Addr = i_ID_EX_Rt_Addr) then
      -- EX?EX hazard on Rt
      o_ForwardB <= "10";

    elsif (i_MEM_WB_RegWrite = '1')
       and (i_MEM_WB_Rd_Addr /= "00000")
       and (i_MEM_WB_Rd_Addr = i_ID_EX_Rt_Addr) then
      -- WB?EX hazard on Rt
      o_ForwardB <= "01";
    end if;
  end process;
end Behavioral;
